{"version":3,"sources":["DivisionTable.module.css","TeamRow.jsx","DivisionTable.jsx","recordsService.js","App.js","index.js","TeamRow.module.css"],"names":["module","exports","division","division-table-header","division-table-body","more-information","TeamRow","props","team","_props$team","wins","losses","name","react_default","a","createElement","className","styles","DivisionTable","league","teams","title","map","src_TeamRow","key","endpoint","RecordsService","getStandings","_callee","records","recordsGroupedByLeague","recordsGroupedByDivision","regenerator_default","wrap","_context","prev","next","_this","fetchRecords","sent","groupRecordsByLeague","Object","values","leagueRecords","i","keys","divisions","groupRecordsByDivision","abrupt","sortedDivisions","j","sortTeamsByWins","stop","this","_callee2","response","_context2","fetch","concat","json","t0","console","log","groupBy","sortBy","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","standings","setState","leagues","src_DivisionTable","Component","ReactDOM","render","src_App","document","getElementById","team-name","team-wins","team-losses"],"mappings":"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","file":"static/js/main.e841c091.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"division\":\"DivisionTable_division__2yj9X\",\"division-table-header\":\"DivisionTable_division-table-header__2DD2G\",\"division-table-body\":\"DivisionTable_division-table-body__2ebjX\",\"more-information\":\"DivisionTable_more-information__1QS7P\"};","import React from 'react';\n\nimport styles from \"./TeamRow.module.css\";\n\nfunction TeamRow(props) {\n  if (!props.team) return null;\n\n  const { team: { wins, losses, team: name } } = props;\n\n  if (!wins || !losses || !name) {\n    return null;\n  }\n\n  return (\n    <tr>\n      <td className={styles[\"team-name\"]}>{name}</td>\n      <td className={styles[\"team-wins\"]}>{wins}</td>\n      <td className={styles[\"team-losses\"]}>{losses}</td>\n    </tr>\n  );\n}\n\nexport default TeamRow;\n","import React from 'react';\n\nimport styles from \"./DivisionTable.module.css\";\nimport TeamRow from \"./TeamRow\";\n\nfunction DivisionTable(props) {\n  const {division, league, teams} = props;\n\n  if (!division || !league || !teams) {\n    return null;\n  }\n\n  return (\n    <table className={styles.division}>\n      <thead>\n      <tr className={styles[\"division-table-header\"]}>\n        <th>{league} {division}</th>\n        <th><span className={styles[\"more-information\"]} title=\"Wins\">W</span></th>\n        <th><span className={styles[\"more-information\"]} title=\"Losses\">L</span></th>\n      </tr>\n      </thead>\n      <tbody className={styles[\"division-table-body\"]}>\n      {\n        teams.teams.map(team => {\n          return <TeamRow key={team.team} team={team}/>\n        })\n      }\n      </tbody>\n    </table>\n  );\n}\n\nexport default DivisionTable;\n","import groupBy from 'lodash.groupby';\nimport sortBy from 'lodash.sortby';\n\nconst endpoint = 'https://api.mobileqa.mlbinfra.com';\n\nclass RecordsService {\n\n  /**\n   * Get current MLB Standings, grouped by division, sorted by wins.\n   *\n   * @return (Array)\n   */\n  getStandings = async () => {\n    const records = await this.fetchRecords();\n\n    const recordsGroupedByLeague = RecordsService.groupRecordsByLeague(records);\n\n    const recordsGroupedByDivision = Object.values(recordsGroupedByLeague).map((leagueRecords, i) => {\n      return {\n        league: Object.keys(recordsGroupedByLeague)[i],\n        divisions: RecordsService.groupRecordsByDivision(leagueRecords)\n      }\n    });\n\n    return recordsGroupedByDivision.map((league, i) => {\n      const { divisions } = league;\n\n      const sortedDivisions = Object.values(divisions).map((teams, j) => {\n        return {\n          division: Object.keys(divisions)[j],\n          teams: RecordsService.sortTeamsByWins(teams)\n        }\n      });\n\n      return {\n        league: Object.keys(recordsGroupedByLeague)[i],\n        divisions: sortedDivisions\n      }\n    });\n  };\n\n  /**\n   * Fetch the records from the MLB api\n   * Log any errors to the console\n   *\n   * @return {Array}\n   */\n  fetchRecords = async () => {\n    try {\n      const response = await fetch(`${endpoint}/api/interview/v1/records`);\n      return await response.json();\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  /**\n   * Group a given set of records by the league.\n   * The order of grouped values is determined by the order they occur in collection\n   *\n   * @param {Array} records An array of records objects returned by the MLB API\n   *\n   * @return {Array}\n   */\n  static groupRecordsByLeague(records) {\n    return groupBy(records, 'league');\n  }\n\n  /**\n   * Group a given set of records by the division.\n   * The order of grouped values is determined by the order they occur in collection\n   *\n   * @param {Array} records An array of records objects returned by the MLB API\n   *\n   * @return {Array}\n   */\n  static groupRecordsByDivision(records) {\n    return groupBy(records, 'division');\n  }\n\n  /**\n   * Sort the teams by wins in descending order\n   * This method performs a stable sort, that is, it preserves the original sort order of equal elements\n   *\n   * @param {Array} teams An array of team objects\n   *\n   * @return {Array}\n   */\n  static sortTeamsByWins(teams) {\n    return sortBy(teams, team => {\n      return -team.wins\n    });\n  }\n}\n\nexport default RecordsService;\n","import React, {Component} from 'react';\nimport DivisionTable from \"./DivisionTable\";\nimport RecordsService from \"./recordsService\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      standings: []\n    }\n  }\n\n  async componentDidMount() {\n    const standings = await new RecordsService().getStandings();\n\n    this.setState({\n      standings\n    });\n  }\n\n  render() {\n    const { standings } = this.state;\n\n    return (\n      <div className=\"container\">\n        <h1>Standings</h1>\n\n        <h3>Regular Season</h3>\n        {\n          standings.map(leagues => {\n            const { divisions, league } = leagues;\n\n            return divisions.map(teams => {\n              const { division } = teams;\n\n              return <DivisionTable key={division} league={league} division={division} teams={teams}/>\n            });\n          })\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"team-name\":\"TeamRow_team-name__19Kw-\",\"team-wins\":\"TeamRow_team-wins__BeTDR\",\"team-losses\":\"TeamRow_team-losses__1dkiP\"};"],"sourceRoot":""}